{"version":3,"sources":["util/Spotify.js","components/Track/Track.js","components/TrackList/TrackList.js","components/Playlist/Playlist.js","components/SearchBar/SearchBar.js","components/SearchResults/SearchResults.js","components/App/App.js","index.js","registerServiceWorker.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","event","this","onAdd","track","onRemove","isRemoval","className","onClick","name","artist","album","renderAction","React","Component","TrackList","tracks","map","id","Playlist","handleNameChange","onNameChange","target","value","onChange","defaultValue","playlistTracks","onSave","SearchBar","state","term","handleTermChange","search","setState","onSearch","placeholder","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","ReactDOM","render","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.aaaa03e1.chunk.js","sourcesContent":["const clientId = '968c8a1acd834ee29e3c6040d20c9ddb';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;\n","import React from 'react';\n\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  addTrack(event) {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(event) {\n    this.props.onRemove(this.props.track);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    }\n    return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;","import React from 'react';\n\nimport './TrackList.css';\n\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => {\n            return <Track track={track}\n                          key={track.id}\n                          onAdd={this.props.onAdd}\n                          isRemoval={this.props.isRemoval}\n                          onRemove={this.props.onRemove} />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default TrackList;","import React from 'react';\n\nimport './Playlist.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} defaultValue={'New Playlist'} />\n        <TrackList tracks={this.props.playlistTracks}\n                   isRemoval={true}\n                   onRemove={this.props.onRemove} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;","import React from 'react';\n\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: ''\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  handleTermChange(event) {\n    this.setState({term: event.target.value});\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song Title\" onChange={this.handleTermChange} />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React from 'react';\n\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './App.css';\n\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.search = this.search.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onNameChange={this.updatePlaylistName}\n                      onRemove={this.removeTrack}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}